using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace Handlers
{
    public static class BotMethods
    {
        // –°–ª–æ–≤–∞—Ä—å —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª –∏ —Ç—É—Ä–µ—Ü–∫–∏–π
        private static readonly Dictionary<string, (string English, string Turkish)> Dictionary = new(StringComparer.OrdinalIgnoreCase)
        {
            { "–ø—Ä–∏–≤–µ—Ç", ("hello", "merhaba") },
            { "–º–∏—Ä", ("world", "d√ºnya") },
            { "–∫–æ—Ç", ("cat", "kedi") },
            { "—Å–æ–±–∞–∫–∞", ("dog", "k√∂pek") },
            { "–¥–æ–º", ("house", "ev") },
            { "—É—Ö–æ", ("ear", "kulak") },
            { "–∑–∏–º–∞", ("winter", "kƒ±≈ü") },
            { "–ª–µ—Ç–æ", ("summer", "yaz") },
            { "–≤–µ—Å–Ω–∞", ("spring", "bahar") },
            { "–æ—Å–µ–Ω—å", ("autumn", "sonbahar") },
            { "–ø—Ä–æ–≥—Ä–∞–º–∏—Å—Ç", ("programmer", "programcƒ±") },
            { "–ª—é–±–æ–≤—å", ("love", "a≈ük") },
            { "–†–æ—Å—Å–∏—è", ("Russia", "Rusya") },
            { "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", ("Saint-Petersburg", "Saint Petersburg") },
            { "—Ñ–µ–Ω", ("fan", "sa√ß kurutma makinesi") },
            { "–ª–∞–º–ø–∞", ("lamp", "lamba") },
            { "–º—É–∑—ã–∫–∞", ("music", "m√ºzik") },
            { "–ª–∏—Ü–æ", ("face", "ki≈üi") },
            { "–∫–æ–¥", ("code", "kod") },
            { "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", ("please", "l√ºtfen") },
            { "—Å–ø–∞—Å–∏–±–æ", ("thanks", "te≈üekk√ºrler") },
            { "–ø–æ–∫–∞", ("while", "kadar") }

        };

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–π).
        /// </summary>
        public static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            if (update.Message is not { Text: { } messageText } || update.Message.From is null)
                return;

            var chatId = update.Message.Chat.Id;
            var username = update.Message.From.Username ?? "—Å–æ–ª–Ω—ã—à–∫–æ"; // @ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç,

            try
            {
                if (messageText == "/start")
                {
                    await SendMessage(botClient, chatId, $"–ü—Ä–∏–≤–µ—Ç, @{username}! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏—Å—Å–∫–∏–π –∏ —Ç—É—Ä–µ—Ü–∫–∏–π.");
                    return;
                }

                if (messageText == "/author")
                {
                    await SendMessage(botClient, chatId, "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: @polinkarvaüòä");
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
                if (Dictionary.TryGetValue(messageText.Trim(), out var translation))
                {
                    await SendMessage(botClient, chatId, $"–ü–µ—Ä–µ–≤–æ–¥ —Å: \n –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: {translation.English}\n –¢—É—Ä–µ—Ü–∫–æ–≥–æ: {translation.Turkish}");
                }
                else
                {
                    await SendMessage(botClient, chatId, "–Ø –Ω–µ –ø–æ–Ω—è–ª–∞, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª, –Ω–∞–ø–∏—à–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É.");
                }
            }
            catch (Exception ex)
            {
                await SendMessage(botClient, chatId, $"–û—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        /// </summary>
        private static async Task SendMessage(ITelegramBotClient botClient, long chatId, string text)
        {
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: text,
                cancellationToken: CancellationToken.None
            );
        }
    }
}